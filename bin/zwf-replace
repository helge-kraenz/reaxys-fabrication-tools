#!/usr/bin/perl

# Header {{{
#==============================================================#
#==============================================================#
#
# Version: 1.0.1
# Updated: 2022-07-14
# Author: Helge Kraenz
#
# History
# 1.0.0   Initial    kraenzh
# 1.0.1   Released   kraenzh
#
#==============================================================#
#==============================================================#

#==============================================================#
# The source and the computer programming technology embodied
# herein constitute commercially valuable trade secrets and
# copyrighted material of Elsevier Information Systems GmbH
# and its licensors. You are not permitted to copy or disclose
# or allow to be disclosed any data or information with respect
# to this source or the computer programming technology
# embodied herein, or any documentation, drawings,
# descriptions, models, reports or other media relating hereto
# except as permitted in writing by Elsevier Information
# Systems GmbH.
#==============================================================#
# Header }}}

# Modules and pragmas {{{
use strict;
use warnings;
use File::Basename;
use Getopt::Long;
use Pod::Usage;
# Modules and pragmas }}}

# Variables {{{
my $VERSION   = "1.0.0";
my $MyName    = basename( $0 );

my $FieldCode = undef;
my $Search    = "";
my $Replace   = "";
my $Help      = undef;
my $Man       = undef;
my $Version   = undef;
# Variables }}}

# Parse command line {{{
GetOptions(
  "field=s"   => \$FieldCode ,
  "help"      => \$Help      ,
  "man"       => \$Man       ,
  "replace=s" => \$Replace   ,
  "search=s"  => \$Search    ,
  "version"   => \$Version   ,
);
# Parse command line }}}

# Check parameters {{{
pod2usage( 0 ) if $Help;
pod2usage( -verbose => 2 , -exitval => 0 ) if $Man;
if( $Version )
{
  print( "This is $MyName, version $VERSION\n" );
  exit;
}
die "No field given.\n" if ! $FieldCode;
die "No search string given.\n" if ! $Search;
die "No replace string given.\n" if ! defined $Replace;
# Check parameters }}}

# Prepare loops {{{
my $Records        = 0;
my $Facts          = 0;
my $Fields         = 0;
my $Changed        = 0;
my $MatchingFields = 0;
my $ChangedFields  = 0;
   $/              = "\02";
# Prepare loops }}}

# Record loop {{{
while( my $Record = <> )
{
  chomp( $Record );
  next if ! $Record;
  $Records++;

  # Fact loop {{{
  my @Facts = split( /\03/ , $Record );
  for my $Fact ( @Facts )
  {
    $Facts++ if $Fact;

    # Field loop {{{
    my @Fields = split( /\01/ , $Fact );
    for my $Field ( @Fields )
    {
      if( $Field )
      {
        $Fields++;

        if( substr( $Field , 0 , 3 ) eq $FieldCode )
        {
          $MatchingFields++;
          my $Hits = ( substr( $Field , 3 ) =~ s{$Search}{$Replace}gms );
          $Changed = $Changed + $Hits;
          $ChangedFields++ if $Hits > 0;
        }
        print "\01$Field";
      }
    }
    # Field loop }}}

    print "\03";
  }
  # Fact loop }}}

  print "\02";
}
# Record loop }}}

print STDERR <<EOF;
Records:         $Records
Facts:           $Facts
Fields:          $Fields
Fields Matching: $MatchingFields
Changes:         $Changed
Fields Changed:  $ChangedFields
EOF

exit;

__END__

=head1 NAME
 
zwf-replace - Parses 3-byte files and applies replacement operations
 
=head1 SYNOPSIS
 
zwf-replace [options] XF [XF ...]
 
 Options:
   -field <name>      field name
   -help              brief help message
   -man               full documentation
   -search <pattern>  search pattern
   -replace <string>  replacement string
   -version           print version and exit
 
=head1 OPTIONS
 
=over 4
 
=item B<-field name>
 
The name of the field in which replacement occurs. Required.
 
=item B<-help>
 
=item B<-man>
 
Prints the manual page and exits.
 
=item B<-replace string>
 
The replacement string. If empty all occurences found will be deleted.
 
=item B<-search pattern>
 
A Perl regex used for matching.
 
=item B<-version>
 
Prints the version and exits.
 
=back
 
=head1 DESCRIPTION
 
B<This program> applies a regex on a given field content in a ZWF file.

It scans the input file or STDIN and writes the output to STDOUT. Please do not supply
multiple input files - this won't work.

It decomposes the files down to fields and applices the given search/replace patterns
to the contents of the fields.

The field on which the search/replacement should be applied has to be given on command line.
The search pattern must be given as well otherwise the program will terminate with an error.

On program termination some statisics will be dumped to STDERR.

=head1 EXAMPLES
 
Reads a zwf file named rea.xf, removes all 0 from BL1 fields and dumps to out.xf:

$ zwf-replace -f BL1 -s 0 rea.xf > out.xf

Reads a zwf file named rea.xf, replaces the string "01" with "10" in BL1 fields and dumps to out.xf:

$ zwf-replace -f BL1 -s 01 r 10 > out.xf

=head1 TODO

Support dynamic replacement, i.e. replacing with the matching string.

 
=cut
